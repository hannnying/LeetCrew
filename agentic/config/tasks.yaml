analyze_topic_performance_task:
  description: >
    Analyze raw topic stats to calculate normalized performance metrics such as accuracy,
    hint usage rate, and YouTube watch rate per topic, expressed as percentages.
  expected_output: >
    A dictionary where each key is a topic name (string), and each value is another dictionary containing the following float percentage metrics for that topic:
    - accuracy: percentage of questions solved correctly
    - hints_usage: percentage of questions where hints were used
    - youtube_watch_rate: percentage of questions where YouTube explanations were watched
    Example:
    {
      "topic_name": {
        "accuracy": float,            # Percentage of solved questions
        "hints_usage": float,         # Percentage of questions where hints were used
        "youtube_watch_rate": float   # Percentage of questions where YouTube videos were watched
      },
      ...
    }
  agent: performance_analyst


rank_weak_topics_task:
  description: >
    Given analyzed topic performance metrics, compute a combined weakness score for each topic
    based on accuracy, hint usage, and YouTube watch rates. Return a ranked list of the top N
    weakest topics with their scores.
  expected_output: >
    A list of dictionaries, where each dictionary represents a weak topic and contains:
    - topic (string): the name of the topic
    - score (float): the combined weakness score (higher means the topic needs more improvement)
    [
      {
        "topic": "topic_name",
        "score": float               # Combined weakness score (higher means weaker)
      },
      ...
    ]
  agent: performance_analyst
  

recommendation_task:
  description: >
    Given a list of weak topics for a user, recommend 3 unsolved LeetCode problems
    that can help them improve in those areas. Use the topics provided to query the knowledge graph
    and find relevant problems the user hasn't solved yet. Ensure diversity across topics where possible.
  expected_output: >
    A list of 5 recommended problem titles (or IDs) with their corresponding topics.
    The problems must not have been solved by the user. Prefer easier or similar-difficulty problems
    if the user has struggled recently.
    Example:
    ["two-sum", "palindrome-number", "roman-to-integer"]
  agent: strategy_recommender
